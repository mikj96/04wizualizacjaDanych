# -*- coding: utf-8 -*-
"""Wizualizacja danych

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13i0BqxfgNRuYFCz0dg8Ao6BCLjTCmnJG
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline 
import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import register_matplotlib_converters
#używanie jednostek w matplotlib (np. timeseries)
register_matplotlib_converters()

#utworz rysunek (kontener na wykresy)

fig,ax = plt.subplots()
x=[0,1,2,3]
y=[0,1,2,3]
ax.plot(x,y)

plt.show()

url = 'https://raw.githubusercontent.com/matzim95/ML-datasets/master/weather.csv'
weather = pd.read_csv(url, parse_dates = True, index_col = 'date')
weather

#utworzymy rysunek
fig,ax=plt.subplots()
ax.plot(weather.index,weather['temp_max'])
ax.plot(weather.index,weather['temp_min'])

#siatka
fig,ax = plt.subplots() #robi pole na wykres
ax.grid() #dodaje siatke na x
plt.show()

#markery i linie na wykresie 
n=20
fig,ax=plt.subplots()
ax.plot(weather.index[:n],weather['temp_max'][:n], marker='o', linestyle = '--', color = 'r')
ax.plot(weather.index[:n],weather['temp_min'][:n], marker='v', linestyle = 'None', color = 'b')
plt.show()

#opisywanie osi
n=31
fig,ax=plt.subplots()
ax.plot(weather.index[:n],weather['temp_max'][:n], marker='o', linestyle = '--' )
ax.plot(weather.index[:n],weather['temp_min'][:n], marker='v', linestyle = 'None')

ax.set_xlabel('Date (year/month/day)')
ax.set_ylabel('Temperature [centigrade]')

ax.set_title('Temperature in Seattle - January 2012')
ax.xaxis.set_tick_params(rotation = 90)
plt.show()

#df austin weather
url = 'https://raw.githubusercontent.com/matzim95/ML-datasets/master/austin_weather.csv'
austin_weather = pd.read_csv(url,parse_dates = True, index_col = 'Date')
austin_weather.head()
austin_weather.dtypes #wyswietla jakiego typu danymi sa obiekty

n = 50

fig,ax = plt.subplots()
ax.plot(austin_weather.index[:n], austin_weather['TempAvgF'][:n].astype(float)[:n], color ='r')
ax.plot(austin_weather.index[:n], austin_weather['TempHighF'][:n].astype(float)[:n], color ='r', linestyle = '--')
ax.plot(austin_weather.index[:n], austin_weather['TempLowF'][:n].astype(float)[:n], color ='r', linestyle = 'dotted')

ax.plot(austin_weather.index[:n], austin_weather['DewPointAvgF'][:n].astype(float)[:n], color ='b')
ax.plot(austin_weather.index[:n], austin_weather['DewPointHighF'][:n].astype(float)[:n], color ='b', linestyle = '--')
ax.plot(austin_weather.index[:n], austin_weather['DewPointLowF'][:n].astype(float)[:n], color ='b', linestyle = 'dotted')

ax.set_xlabel('Date (year-moth-day')

ax.set_ylabel('Temperature/Dew Point [degrees Fahrenheit]')
ax.set_title('Weather in Austin')
ax.xaxis.set_tick_params(rotation=90)
plt.show()

#czytelniej
fig,ax = plt.subplots(2,1,sharex= True) #sharex - jedna os dla dwoch wykresow - os x
n = 50

ax[0].plot(austin_weather.index[:n], austin_weather['TempAvgF'][:n].astype(float)[:n], color ='r')
ax[0].plot(austin_weather.index[:n], austin_weather['TempHighF'][:n].astype(float)[:n], color ='r', linestyle = '--')
ax[0].plot(austin_weather.index[:n], austin_weather['TempLowF'][:n].astype(float)[:n], color ='r', linestyle = 'dotted')

ax[1].plot(austin_weather.index[:n], austin_weather['DewPointAvgF'][:n].astype(float)[:n], color ='b')
ax[1].plot(austin_weather.index[:n], austin_weather['DewPointHighF'][:n].astype(float)[:n], color ='b', linestyle = '--')
ax[1].plot(austin_weather.index[:n], austin_weather['DewPointLowF'][:n].astype(float)[:n], color ='b', linestyle = 'dotted')

ax[1].set_xlabel('Date (year-moth-day')

ax[0].set_ylabel('Temperature')
ax[1].set_ylabel('Dew Point')

ax[0].set_title('Weather in Austin')
ax[1].xaxis.set_tick_params(rotation=90)

ax[0].annotate('Something happened', xy=[pd.Timestamp('2014-01-06'),28],
               xytext=(pd.Timestamp('2014-01-09'),22.5),
               arrowprops={'arrowstyle':'->','color' :'gray'})
plt.show()

#ZADANIE
url = 'https://raw.githubusercontent.com/matzim95/ML-datasets/master/austin_weather.csv'
fig,ax= plt.subplots(3,1, sharex=True)
n = 100

austin_weather_2015_IV = austin_weather[(austin_weather.index>='2015-09-01')&(austin_weather.index<='2015-12-31')]
austin_weather = austin_weather_2015_IV

ax[0].plot(austin_weather.index[:n], austin_weather['TempAvgF'][:n].astype(float)[:n], color ='r')
ax[0].plot(austin_weather.index[:n], austin_weather['TempHighF'][:n].astype(float)[:n], color ='r', linestyle = '--')
ax[0].plot(austin_weather.index[:n], austin_weather['TempLowF'][:n].astype(float)[:n], color ='r', linestyle = 'dotted')

ax[1].plot(austin_weather.index[:n], austin_weather['HumidityAvgPercent'][:n].astype(float)[:n], color ='b')
ax[1].plot(austin_weather.index[:n], austin_weather['HumidityHighPercent'][:n].astype(float)[:n], color ='b', linestyle = '--')
ax[1].plot(austin_weather.index[:n], austin_weather['HumidityLowPercent'][:n].astype(float)[:n], color ='b', linestyle = 'dotted')

ax[2].plot(austin_weather.index[:n], austin_weather['WindAvgMPH'][:n].astype(float)[:n], color ='green')
ax[2].plot(austin_weather.index[:n], austin_weather['WindHighMPH'][:n].astype(float)[:n], color ='green', linestyle = '--')
ax[2].plot(austin_weather.index[:n], austin_weather['WindGustMPH'][:n].astype(float)[:n], color ='green', linestyle = 'dotted')

ax[0].set_xlabel('Date (year-moth-day')
ax[1].set_xlabel('Date (year-moth-day')
ax[2].set_xlabel('Date (year-moth-day')

ax[0].set_ylabel('Temperature')
ax[1].set_ylabel('Humidity')
ax[2].set_ylabel('Wind')

ax[0].set_title('Weather in Austin')

ax[2].xaxis.set_tick_params(rotation=90)

ax[2].annotate('Najwieksza wichura', xy=[pd.Timestamp('2015-10-30'),42],
               xytext=(pd.Timestamp('2015-10-30'),30),
               arrowprops={'arrowstyle':'->','color' :'red'})
               
plt.show()

url = 'https://raw.githubusercontent.com/matzim95/ML-datasets/master/co2.csv'

co2 =pd.read_csv(url,parse_dates=True,index_col='Date')
co2.head()

fig,ax=plt.subplots()
ax.plot(co2.index,co2.Interpolated)
ax.set_xlabel('Time')
ax.set_ylabel('CO2')
plt.show()

millenium=co2['2000':]
fig,ax=plt.subplots()
ax.plot(millenium.index,millenium.Interpolated)
ax.set_xlabel('Time')
ax.set_ylabel('CO2')
plt.show()

rok_97=co2['1997':'1997']
fig,ax=plt.subplots()
ax.plot(rok_97.index,rok_97.Interpolated)
ax.set_xlabel('Time')
ax.set_ylabel('CO2')
plt.show()

url ='https://raw.githubusercontent.com/matzim95/ML-datasets/master/temperature.csv'

temperature=pd.read_csv(url,parse_dates=True,index_col='dt')
temperature.index.names =['Date']
temperature.City.unique()
paris = temperature[temperature.City =='Paris']

merged = pd.merge(co2,paris, how='inner',on='Date')

paris

fig,ax=plt.subplots()
ax.plot(merged.index,merged.Interpolated)
ax.plot(merged.index,merged['AverageTemperature'])

ax.set_xlabel('Time')
ax.set_ylabel('CO2/Temperature')
plt.show()

#2 osie Y
fig,ax = plt.subplots()
ax.plot(merged.index,merged.Interpolated, color ='red')

ax.set_xlabel('Time')
ax.set_ylabel('CO2', color = 'blue')
#klonowanie osi (wspólna oś x, osobna Y)

ax2=ax.twinx()
ax2.plot(merged.index,merged['AverageTemperature'])
ax2.set_ylabel('Temperature', color='r')
plt.show()

#funkcja do szeregów czasowych
def plot_timeseries(axis,x,y,color,xlabel,ylabel):
  axis.plot(x,y,color)
  axis.set_xlabel(xlabel)
  axis.set_ylabel(ylabel)
  axis.tick_params('y', color=color)

fig,ax=plt.subplots()

plot_timeseries(ax,merged.index,merged.Trend,color='r',ylabel='CO2',xlabel='Time')
ax2=ax.twinx()
plot_timeseries(ax2,merged.index,merged['AverageTemperature'],color ='b', ylabel='Temperature',xlabel='Time')

#wykresy słupkowe
url= 'https://raw.githubusercontent.com/matzim95/ML-datasets/master/population.csv'
population=pd.read_csv(url,index_col='City')

pogrupowane = population.groupby('Sex')
both,female,male= [pogrupowane.get_group(x) for x in pogrupowane.groups]
male

fig,ax=plt.subplots()
ax.bar(both.index,both['Value'])
ax.xaxis.set_tick_params(rotation=90)
ax.set_ylabel('Population')
plt.show()

fig,ax=plt.subplots()
ax.bar(male.index,male['Value'],label='Male')
ax.bar(female.index,male['Value'],label='Female',bottom=male['Value'])


ax.tick_params(rotation=90)
ax.set_ylabel('Population')
ax.legend()
plt.show()

#przepisz
'''import numpy as np
import matplotlib.pyplot as plt

X = ['Group A','Group B','Group C','Group D']'''

#stwórz wykres słupkowy
url= 'https://raw.githubusercontent.com/matzim95/ML-datasets/master/population.csv'
population=pd.read_csv(url,parse_dates=True,index_col='City')
pogrupowane = population.groupby('Sex')
both,female,male= [pogrupowane.get_group(x) for x in pogrupowane.groups]

fig,ax=plt.subplots()
ax.bar(male.index,male['Value'],label='Male')
ax.bar(female.index,male['Value'],label='Female',bottom=male['Value'])

ax.tick_params(rotation=90)
ax.set_ylabel('Population')
ax.legend()
plt.show()

'''
url = 'https://raw.githubusercontent.com/matzim95/ML-datasets/master/medals.csv'
medals = pd.read_csv(url,parse_dates=True,index_col='Sports')
def groupby_column(df,column):
  groupby=df.groupby(column)
  return{x:groupby.get_group(x) for x in groupyby.groups}

all_sports = groupby_column(medals,'Sport')'''

'''url = 'https://raw.githubusercontent.com/matzim95/ML-datasets/master/olympic.csv'
all_sports=pd.read_csv(url,index_col='Name')
fig,ax = plt.subplots()
ax.hist(all_sports['Gymnastics'],['Height'],label='Gymnastics',bins=20,alpha=0.7)
ax.hist(all_sports['Basketball'],['Height'],label='Basketball',bins=20,alpha=0.7)
ax.set_xlabel('Height [cm]')
ax.set_ylabel('Number of observations')
ax.legend()
plt.show()'''

'''#słupki błędu
fig,ax=plt.subplots()
ax.bar('Gymnastics',all_sports['Gymnastics']['Height'].mean(),
       yerr=all_sports['Gymnastics']['Height'].std())
ax.bar('Basketball',all_sports['Basketball']['Height'].mean(),
       yerr=all_sports['Basketball']['Height'].std())
ax.set_ylabel('Height [cm]')
plt.show()'''

n = 30
fig,ax = plt.subplots()
ax.errorbar(austin_weather.index[:n],
                       yerr=(austin_weather['TempHighF'][:n]-austin_weather))

ax.set_title('Weather in Austin')
ax.xaxis.set_tick_params(rotation=90)

import numpy as np
pplt.yticks(np.arange(0,max(austin_weather['TempAvgF']),20))

#wykresy pudełkowe
fig,ax=plt.subplots()
ax.boxplot([all_sports['Gymnastics']['Height'].dropna(),
            all_sports['Basketball']['Height'].dropna()])

ax.set_xticklabels(['Gymnastisc','Basketball'])
ax.set_ylabel('Height [cm]')
plt.show()

#wykres punktowy

fig,ax=plt.subplots()
ax.scatter(merged['Interpolated'],merged['AverageTemperature'],c=merged.index)
ax.set_xlabel('CO2')
ax.set_ylabel('Temperature')
plt.show()

#ZADANIE
def lata(x):
  if x.year<1970:
    return "60's"
  elif x.year<1980:
    return "70's"
  elif x.year<1990:
    return "80's"
  elif x.year<2000:
    return "90's"
  elif x.year<2010:
    return "00's"
  else:
    return "10's"

merged_plot=merged.reset_index()
merged_plot['Date'] =pd.to_datetime(merged_plot['Date'],format= '%Y -%m - %d')
merged_plot['lata']=merged_plot['Date'].apply(lata)
merged_plot

fig,ax=plt.subplots()
color={"60's":'blue',"70's":'green',"80's":'yellow',"90's":'orange',"00's":'red',"10's":'purple'}

ax.scatter(merged_plot['Interpolated'],merged_plot['AverageTemperature'],
           color=merged_plot['lata'].map(color))
ax.set_xlabel('CO2')
ax.set_ylabel('Temperature')
plt.show()