# -*- coding: utf-8 -*-
"""Wizualizacja danych 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15X3WOIJTDkzYRcHdA2R_CRVTbIgTjIPd
"""

# Commented out IPython magic to ensure Python compatibility.
#SEABORN

# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display

url='https://raw.githubusercontent.com/matzim95/ML-datasets/master/wine.csv'

wine=pd.read_csv(url)
pd.plotting.register_matplotlib_converters()

wine.head()
sns.lmplot(x = 'Alcohol', y='Magnesium',data=wine, fit_reg=False,hue='Class')

plt.grid()
plt.ylim(50,150)
plt.xlim(11,14)

#WYKRES PUDEŁKOWY
g=sns.boxplot(data=wine, x ='Class', y='Alcohol' )
g.xaxis.set_tick_params(rotation=90)

#set theme
sns.set_style('darkgrid')

sns.violinplot(x='Class', y='Alcohol',data=wine)

#WYKRES ROJOWY

sns.swarmplot(x='Class',y='Alcohol',data=wine)

sns.set_style('whitegrid')
sns.violinplot(x='Class',y='Alcohol',data=wine,inner=None)
sns.swarmplot(x='Class',y='Alcohol',data=wine,color='k',alpha=0.5)
plt.title('Alkohol w zaleznosci od klasy wina')

melted_df = pd.melt(wine.iloc[:,[5,6,7,8,13]], id_vars='Class',var_name='Stat')
melted_df

plt.figure(figsize=(10,6))
sns.swarmplot(x='Stat',y='value',data=melted_df,hue='Class')
plt.legend(bbox_to_anchor=(1,1),loc=2)

#HEATMAPY
corr=wine.corr()
plt.figure(figsize=(12,7)) #zmieni mi rozmiar wykresu = poprawi czytelnosc
sns.heatmap(corr,annot=True,cmap="YlGnBu",linewidths = 1,fmt ='.2') 
#fmt='.1' - jedno miejsce po przecinku

corr['Alcohol'] #tak otrzymujemy konkretna kolumne/dobieramy sie do konkretnej wartosci

#HISTOGRAM
sns.distplot(wine.Alcohol, kde=True)

#wykres countplot
sns.countplot(x='Class',data=wine)

#rozklad gestosci dla 2 zmiennych

sns.kdeplot(wine.Alcohol, wine.Magnesium, x='Alcohol',y='Magnesium',fill=True,n_levels=10,shade=True,cbar=True,cmap ='viridis')

url = 'https://raw.githubusercontent.com/matzim95/ML-datasets/master/auto_mpg.csv'
cars = pd.read_csv(url)
sns.displot(cars.displacement, kde=True, color='r', fill='blue')

#PLOTLY
import plotly.graph_objs as go
from plotly.offline import iplot
import pandas as pd

!git clone https://github.com/matzim95/ML-datasets
timesData=pd.read_csv('ML-datasets/timesData.csv')
timesData

df=timesData.iloc[:100,:]

trace1=go.Scatter(
    x=df.world_rank,
    y=df.citations,
    mode='lines',
    name='Cytowania',
    marker=dict(color='rgba(16,112,2,0.8)'),
    text=df.university_name
)

#wykres2

trace2=go.Scatter(
    x=df.world_rank,
    y=df.teaching,
    mode='lines+markers',
    name='Poziom nauki',
    marker=dict(color='rgba(80,26,80,0.8)'),
    text=df.university_name
)

data=[trace1,trace2]
layout=dict(title='Poziom nauczania i cytowania, a pozycja w rankingu TOP 100',
            xaxis=dict(title='Ranking światowy',ticklen=5,zeroline=False))
fig=dict(data=data,layout=layout)
iplot(fig)

from pandas.core.dtypes.cast import dict_compat
df2014=timesData[timesData.year==2014].iloc[:100,:]
df2015=timesData[timesData.year==2015].iloc[:100,:]
df2016=timesData[timesData.year==2016].iloc[:100,:]

trace1=go.Scatter(x=df2014.world_rank,
                  y=df2014.citations,
                  mode='markers',
                  name='2014',
                  marker=dict(color='purple'),
                  text=df2014.university_name)

trace2=go.Scatter(x=df2015.world_rank,
                  y=df2015.citations,
                  mode='markers',
                  name='2015',
                  marker=dict(color='purple'),
                  text=df2015.university_name)

trace3=go.Scatter(x=df2016.world_rank,
                  y=df2016.citations,
                  mode='markers',
                  name='2016',
                  marker=dict(color='purple'),
                  text=df2016.university_name)
data=[trace1,trace2,trace3]
layout=dict(title ='Cytowania i ranking najlepszych uniwersytetów w latach 2014-2016',
            xaxis=dict(title='World rank',zeroline=False),
            yaxis=dict(title ='Citation',zeroline=False))


fig=dict(data=data,layout=layout)
iplot(fig)

#wykres słupkowy dla 3 najlepszych uniwersytetów

df2014=timesData[timesData.year==2014].iloc[:3,:]

trace1=go.Bar(
    x=df2014.university_name,
    y=df2014.citations,
    name='Cytowania',
    marker=dict(color='pink',line=dict(color='black',width=2)),
)

trace2=go.Bar(
    x=df2014.university_name,
    y=df2014.teaching,
    name='Nauczanie',
    marker=dict(color='pink',line=dict(color='black',width=2)),
)

data=[trace1,trace2]
layout=go.Layout(barmode='group')
fig=go.Figure(data=data,layout=layout)
iplot(fig)

#wykres kołowy 
df2016=timesData[timesData.year==2016].iloc[:7,:]
pie1=df2016.num_students
pie1_list=[float(each.replace(',','.')) for each in df2016.num_students]
labels=df2016.university_name
#rysunek
fig={
    'data':[{
        'values':pie1_list,
        'labels':labels,
        #'domain':{'x':[0,5]}, TU COŚ NIE GRA
        'name':'Liczba studentów (procentowo)',
        'hoverinfo':'label+percent+name',#co sie stanie jak najedziemy na nasz wykres
        'hole':.3, #ile miejsc po przecinku
        'type':'pie'
    },],
        'layout':{
            'title':'Procentowa liczebność studentów na uniwersytetach',
            'annotations':[
                           {'font':{'size':20},
                            'showarrow':False,
                            'text':'Liczba studentów',
                            'x':0.2,
                            'y':1},
            ]
        }
}
iplot(fig)

#wykres bąbelkowy
df2016=timesData[timesData.year==2016].iloc[:20,:]
num_students_size=[float(each.replace(',','.'))for each in df2016.num_students]
international_color=[float(each) for each in df2016.international]

data=[
      {'y':df2016.teaching,
       'x':df2016.world_rank,
       'mode':'markers',
       'marker':{
           'color':international_color,
           'size':num_students_size,
           'showscale':True
       },
       'text':df2016.university_name}
]
iplot(data)

#histogram
x2011=timesData.student_staff_ratio[timesData.year==2011]
x2012=timesData.student_staff_ratio[timesData.year==2012]

trace1=go.Histogram(
    x=x2011,
    opacity=0.7,
    name='2011',
    marker=dict(color='blue')
)

trace2=go.Histogram(
    x=x2012,
    opacity=0.7,
    name='2012',
    marker=dict(color='red')
)

data=[trace1,trace2]
layout=go.Layout(barmode='overlay',
                 title='Stosunek liczby studentów do liczby pracowników na uniwerstytetach',
                 xaxis=dict(title='Liczba studentów a pracowników'),
                 yaxis=dict(title='Liczba uniwersytetów'))
fig=go.Figure(data=data,layout=layout)
iplot(fig)

import numpy as np

def num(s):
  try:
    return float(s)
  except ValueError:
    return np.nan

#wykres pudełkowy
x2015=timesData[timesData.year==2015]
x2015['total_score']=x2015['total_score'].apply(num)
x2015['research']=x2015['research'].apply(num)

trace1=go.Box(y=x2015.total_score,
              name='Wyniki uniwersytetów w 2015',
              marker=dict(color='navy'))

trace2=go.Box(y=x2015.research,
              name='Punkty za badania w 2015',
              marker=dict(color='green'))
data=[trace1,trace2]
iplot(data)

#macierz korelacji
import plotly.figure_factory as ff
dataframe=timesData[timesData.year==2015]
data2015=dataframe.loc[:,['research','international','total_score']]
data2015['total_score']=data2015['total_score'].apply(num)
data2015['research']=data2015['research'].apply(num)
data2015['international']=data2015['international'].apply(num)
data2015['index']=np.arange(1,len(data2015)+1)
fig=ff.create_scatterplotmatrix(data2016,diag='box',index='index',colormap='Portland',
                                colormap_type='cat',
                                height=700,width=700)
iplot(fig)

#macierz korelacji
import plotly.figure_factory as ff
dataframe=timesData[timesData.year==2016]
data2016=dataframe.loc[:,['citations','income','international_students']]
# data2016['citations']=data2016['citations'].apply(num)
# data2016['income']=data2016['income'].apply(num)
data2016['international_students']=data2016['international_students'].str.rstrip('%').apply(num)/100
data2016['index']=np.arange(1,len(data2016)+1)
#macierz

fig=ff.create_scatterplotmatrix(data2016,diag='histogram',index='index',colormap='Portland',
                                colormap_type='cat',
                                height=700,width=700)
iplot(fig)

#wordcloud
#chmura słów
import matplotlib.pyplot as plt
from wordcloud import WordCloud

x2011= timesData.country[timesData.year ==2011]
x2011.value_counts()

plt.subplots(figsize=(8,8))
wordcloud=WordCloud(
    background_color = 'white',
    width = 512,
    height=384).generate(' '.join(x2011))
plt.imshow(wordcloud)
plt.axis('off')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from IPython.display import display

pd.plotting.register_matplotlib_converters()
url='https://raw.githubusercontent.com/matzim95/ML-datasets/master/drinks.csv'
alkohole=pd.read_csv(url) #,parse_dates=True,index_col ='continent'
alkohole

fig,ax=plt.subplots()
ax.plot(alkohole.index,alkohole['beer_servings'])
ax.plot(alkohole.index,alkohole['wine_servings'])

alkohole.gropuby('continent')

ax.tick_params(rotation=90)
ax.set_ylabel('Wykres zaleznosci')
ax.legend()
plt.show()